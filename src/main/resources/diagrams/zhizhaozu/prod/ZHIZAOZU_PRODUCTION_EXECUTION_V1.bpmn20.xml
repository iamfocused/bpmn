<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:activiti="http://activiti.org/bpmn" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:omgdc="http://www.omg.org/spec/DD/20100524/DC" xmlns:omgdi="http://www.omg.org/spec/DD/20100524/DI" typeLanguage="http://www.w3.org/2001/XMLSchema" expressionLanguage="http://www.w3.org/1999/XPath" targetNamespace="http://www.activiti.org/pur">
  <process id="productionExecution" name="生产执行流程测试" isExecutable="true" activiti:candidateStarterGroups="shengchan@@13@@,admin@@13@@,shengchan,admin">
    <startEvent id="startevent1" name="生产执行启动事件" activiti:initiator="initiator">
    	<extensionElements>
    		<activiti:formProperty id="processNumber_工艺编号_1_string_auto_$$A" name="选择工艺编号" variable="processNumber" required="true"/>
    		<activiti:formProperty id="productionOrderNumber_生产加工单_2_string_t1_$$A" name="生产加工单" variable="productionOrderNumber" required="true"/>
    		<activiti:executionListener event="end" class="org.activiti.engine.impl.bpmn.listener.ScriptExecutionListener">
    			<activiti:field name="language"><activiti:string><![CDATA[groovy]]></activiti:string></activiti:field>
    			<activiti:field name="script">
    				<activiti:string>
    				<![CDATA[
    					import groovy.json.JsonSlurper
    				
    					def jsonSlurper = new JsonSlurper()
    					def proInstId = jsonSlurper.parseText(execution.getVariable('processNumber')).code
    					execution.setVariable('proInstId', execution.getProcessInstanceId())
    					//工序表
    					def processTableName = 'header1566744708879'
    					//工序表std
    					def std1 = 'tbheader1566744708879_item_std'
    					//工序物料表std
    					def std2 = 'tbheader1566744708879-header1566746042674_item_std'
    					//车削工步表std
    					def std3 = 'tbheader1566744708879-header-1566746165617_item_std'
    					//通用工步表std
    					def std4 = 'tbheader1566744708879-header-1566746044755_item_std'
    					//铣削工步表std
    					def std5 = 'tbheader1566744708879-header-1566746163577_item_std'
    					//工序工具表std
    					def std6 = 'tbheader1566744708879-header-1566746045871_item_std'
    					//检验指标
    					def std7 = 'tbheader1566744708879-header-1566746045367_item_std'
    					
    					def list = historyService.createHistoricVariableInstanceQuery().processInstanceId(proInstId).list()
    					if(list == null) {
    						throw new org.activiti.engine.ActivitiIllegalArgumentException('流程已删除,流程实例ID:' + proInstId)
    					}
    					def hiInst = list.stream().filter({x->x.getVariableName().equals(processTableName)}).findFirst().orElse(null)
    					if(hiInst) {
    						execution.setVariable(processTableName,hiInst.getValue())
    					} else {
    						throw new org.activiti.engine.ActivitiIllegalArgumentException('流程变量未找到,流程实例ID:' + proInstId)
    					}
    					
    					//保存std供报表查询，保留当时工艺方案的数据
    					def var1 = list.stream().filter({x->x.getVariableName().equals(std1)}).findFirst().orElse(null)
    					if(var1) {
    						execution.setVariable('processStd',var1.getValue())
    					} else {
    						throw new org.activiti.engine.ActivitiIllegalArgumentException('流程变量(工序报表std)未找到,流程实例ID:' + proInstId)
    					}
    					
    					def var2 = list.stream().filter({x->x.getVariableName().equals(std2)}).findFirst().orElse(null)
    					if(var2) {
    						execution.setVariable('wlStd',var2.getValue())
    					} else {
    						throw new org.activiti.engine.ActivitiIllegalArgumentException('流程变量(物料报表std)未找到,流程实例ID:' + proInstId)
    					}
    					
    					def var3 = list.stream().filter({x->x.getVariableName().equals(std3)}).findFirst().orElse(null)
    					if(var3) {
    						execution.setVariable('cxStd',var3.getValue())
    					} else {
    						throw new org.activiti.engine.ActivitiIllegalArgumentException('流程变量(车削报表std)未找到,流程实例ID:' + proInstId)
    					}
    					
    					def var4 = list.stream().filter({x->x.getVariableName().equals(std4)}).findFirst().orElse(null)
    					if(var4) {
    						execution.setVariable('tyStd',var4.getValue())
    					} else {
    						throw new org.activiti.engine.ActivitiIllegalArgumentException('流程变量(通用报表std)未找到,流程实例ID:' + proInstId)
    					}
    					
    					def var5 = list.stream().filter({x->x.getVariableName().equals(std5)}).findFirst().orElse(null)
    					if(var5) {
    						execution.setVariable('xxStd',var5.getValue())
    					} else {
    						throw new org.activiti.engine.ActivitiIllegalArgumentException('流程变量(铣削报表std)未找到,流程实例ID:' + proInstId)
    					}
    					
    					def var6 = list.stream().filter({x->x.getVariableName().equals(std6)}).findFirst().orElse(null)
    					if(var6) {
    						execution.setVariable('gjStd',var6.getValue())
    					} else {
    						throw new org.activiti.engine.ActivitiIllegalArgumentException('流程变量(工具报表std)未找到,流程实例ID:' + proInstId)
    					}
    					
    					def var7 = list.stream().filter({x->x.getVariableName().equals(std7)}).findFirst().orElse(null)
    					if(var7) {
    						execution.setVariable('jyzbStd',var7.getValue())
    					} else {
    						throw new org.activiti.engine.ActivitiIllegalArgumentException('流程变量(检验指标报表std)未找到,流程实例ID:' + proInstId)
    					}
    					
    					def var8 = list.stream().filter({x->x.getVariableName().equals('processname')}).findFirst().orElse(null)
    					if(var8) {
    						execution.setVariable('processname',var8.getValue())
    					}
    				]]>
    				</activiti:string>
    			</activiti:field>
    		</activiti:executionListener>
    	</extensionElements>
    </startEvent>
    <userTask id="usertask1" name="制定时间分配组" activiti:assignee="${initiator}">
    	<extensionElements>
    		<activiti:formProperty id="processcount1_工序数量_1_string_t6_$$A" name="工序数量" type="string" variable="processcount1" required="true"/>
    	
    		<activiti:formProperty id="productionOrderNumber_生产加工单_1_string_t1_$$VA" name="生产加工单" variable="productionOrderNumber" required="true"/>    		
    		<activiti:formProperty id="tbheader1566744708879_item" name="工序表" type="string" variable="header1566744708879" writable="true" required="false" />
	        <activiti:formProperty id="tbheader1566744708879_opnumber_工序编号_2_string_t1_$$A" name="工序编号" type="string" variable="opnumber"></activiti:formProperty>
	        <activiti:formProperty id="tbheader1566744708879_opname_工序名称_3_string_t1_$$A" name="工序名称" type="string" variable="opnumber"></activiti:formProperty>
	        <activiti:formProperty id="tbheader1566744708879_plannedstarttime_计划开始时间_5_string_t5_$$A" name="计划开始时间" type="string" variable="plannedstarttime" required="true"></activiti:formProperty>
	        <activiti:formProperty id="tbheader1566744708879_plannedendtime_计划结束时间_6_string_t5_$$A" name="计划结束时间" type="string" variable="plannedstarttime" required="true"></activiti:formProperty>
	        <activiti:formProperty id="tbheader1566744708879_optype_工序类型_7_enum_sbs_$$A" name="工序类型" type="enum" variable="optype">
	          <activiti:value id="通用" name="通用"></activiti:value>
	          <activiti:value id="车削" name="车削"></activiti:value>
	          <activiti:value id="铣削" name="铣削"></activiti:value>
	        </activiti:formProperty>
	        
   			<activiti:formProperty id="tbheader1566744708879_subprocessgroup_工段名称_24_string_tree_$$A" name="工段名称" type="string" variable="subprocessgroup" required="true"/>
    	
    		<activiti:taskListener event="complete" class="org.activiti.engine.impl.bpmn.listener.ScriptTaskListener">
    			<activiti:field name="language">
            		<activiti:string><![CDATA[groovy]]></activiti:string>
    			</activiti:field>
    			<activiti:field name="script">
    				<activiti:string>
    				<![CDATA[
    				import groovy.json.JsonSlurper
    				import groovy.json.JsonOutput
    				
    				def jsonSlurper = new JsonSlurper()
    				def execution = task.getExecution()
    				def items = jsonSlurper.parseText(execution.getVariable('tbheader1566744708879_item_std'))
    				
    				def count = execution.getVariable('processcount1')
    				if(count.toInteger() <= 0) {
    					throw new org.activiti.engine.ActivitiIllegalArgumentException('请分配正确的工序数量')
    				}
    				def dList = new ArrayList()
    				items.each{
    					def map = new HashMap()
    					def li = []
    					li<<it.工段名称
    					li<<count
    					li<<it.工序类型
    					li<<it.工序名称
    					li<<it.计划开始时间
    					li<<it.计划结束时间
    					
    					map.put(it.工序编号,li)
    					dList.add(JsonOutput.toJson(map))
    				}
    				
    				execution.setVariable('dList',dList)
    				
    				]]>
    				</activiti:string>
    			</activiti:field>
    		</activiti:taskListener>
    	</extensionElements>
    </userTask>
    <subProcess id="subprocess1" name="Sub Process">
      <multiInstanceLoopCharacteristics isSequential="false" activiti:collection="dList" activiti:elementVariable="map">
      	<completionCondition>${nrOfCompletedInstances/nrOfInstances == 1}</completionCondition>
      </multiInstanceLoopCharacteristics>
      <startEvent id="startevent2" name="Start">
      	<extensionElements>
      		<activiti:executionListener event="start" class="org.activiti.engine.impl.bpmn.listener.ScriptExecutionListener">
      			<activiti:field name="language"><activiti:string><![CDATA[groovy]]></activiti:string></activiti:field>
      			<activiti:field name="script">
      				<activiti:string>
      				<![CDATA[
      				import groovy.json.JsonSlurper
      				
      				def jsonSlurper = new JsonSlurper()
      				def map = jsonSlurper.parseText(execution.getVariable('map'))//key:工序编号 value:[分配组,分配数量,工序类型,工序名称,计划开始时间,计划结束时间]
      				def key = map.keySet()[0]
      				execution.setVariableLocal('group',map.get(key)[0].code)
      				execution.setVariableLocal('totalCount',map.get(key)[1])
      				execution.setVariableLocal('count',map.get(key)[1])
      				execution.setVariableLocal('processType',map.get(key)[2])
      				execution.setVariableLocal('gxProcessName',map.get(key)[3])
      				execution.setVariableLocal('planStart',map.get(key)[4])
      				execution.setVariableLocal('planEnd',map.get(key)[5])
      				execution.setVariableLocal('processNumber1', key)
      				]]>
      				</activiti:string>
      			</activiti:field>
      		</activiti:executionListener>
      	</extensionElements>
      </startEvent>
      <userTask id="usertask2" name="查看更新工序" activiti:candidateGroups="${group}">
      	<extensionElements>
      		<activiti:formProperty id="completecount_完成数_1_string_t6_$$A" variable="completecount" name="完成数量" required="true"/>
      		<activiti:formProperty id="actualstarttime_实际开始时间_2_string_t3_$$A" variable="actualstarttime" name="开始时间" required="true"/>
      		<activiti:formProperty id="completetime_完成时间_2_string_t3_$$A" variable="completetime" name="完成时间" required="true"/>
      	
      		<activiti:formProperty id="lave_剩余数量_1_string_t1_$$VA" variable="lave" name="剩余数量"/>
      		<activiti:formProperty id="processname_工艺名称_2_string_t1_$$VA" name="工艺名称" type="string" variable="processname"/>
      		<activiti:formProperty id="gxProcessName_工序名称_3_string_t1_$$VA" name="工序名称" type="string" variable="gxProcessName"/>

      		<activiti:taskListener event="complete" class="org.activiti.engine.impl.bpmn.listener.ScriptTaskListener">
      			<activiti:field name="language"><activiti:string><![CDATA[groovy]]></activiti:string></activiti:field>
      			<activiti:field name="script">
      				<activiti:string>
      				<![CDATA[
      					import groovy.json.JsonSlurper
						import groovy.json.JsonOutput
      					
      					def jsonSlurper = new JsonSlurper()
      					
      					def execution = task.getExecution()
      					def count = execution.getVariable('count')?.toInteger()
      					def complete = execution.getVariable('completecount')?.toInteger()
      					if(complete <= 0) {
      						throw new org.activiti.engine.ActivitiIllegalArgumentException('请输入正确的完成数量')
      					}
      					
      					def nowCount = count - complete
      					if(nowCount < 0) {
    						throw new org.activiti.engine.ActivitiIllegalArgumentException('剩余数量为:' + count + ' 完成数量为:' + complete)
      					}
      					
      					execution.setVariableLocal('count', nowCount)
      					execution.setVariableLocal('completecountSave',execution.getVariable('completecount'))
      					def completeTime = execution.getVariable('completetime')
      					execution.setVariableLocal('completetimeSave',completeTime)
      					execution.setVariableLocal('actualstarttimeSave',execution.getVariable('actualstarttime'))
      					
      					execution.setVariable('completecount', '')
      					execution.setVariable('completetime', '')
      					execution.setVariable('actualstarttime','')
      					
      					//供报表使用的var
      					def proProgressStr = execution.getVariable('proProgress')
      					def proProgress
      					if(proProgressStr == null) {
      						proProgress = new ArrayList()
      					} else {
      						proProgress = jsonSlurper.parseText(proProgressStr)
      					}
      					def curPro = new HashMap()//当前执行记录
      					curPro.put('orderNum',execution.getVariable('productionOrderNumber'))//生产加工单编号
      					curPro.put('sectionNum',execution.getVariable('group'))//工段编号
      					curPro.put('processNum',execution.getVariable('processNumber1'))//工序编号
      					curPro.put('planStart',execution.getVariable('planStart'))//计划开始时间
      					curPro.put('planEnd',execution.getVariable('planEnd'))//计划结束时间
      					def totalCount = execution.getVariable('totalCount')
      					curPro.put('totalCount',totalCount)//计划数量
      					curPro.put('completeCount',totalCount?.toDouble() - nowCount?.toDouble())//累计完成数量
      					curPro.put('completeTime',completeTime)//此次完成时间
      					
      					proProgress<<curPro
      					
      					execution.setVariable('proProgress',JsonOutput.toJson(proProgress))
      				]]>
      				</activiti:string>
      			</activiti:field>
      		</activiti:taskListener>
      		<activiti:taskListener event="create" class="org.activiti.engine.impl.bpmn.listener.ScriptTaskListener">
      			<activiti:field name="language"><activiti:string><![CDATA[groovy]]></activiti:string></activiti:field>
      			<activiti:field name="script">
      				<activiti:string>
      				<![CDATA[
	      				import javax.crypto.Mac
						import javax.crypto.spec.SecretKeySpec
						import java.security.InvalidKeyException
						
      					def execution = task.getExecution()
      					
      					def count = execution.getVariable('count')
      					
      					execution.setVariableLocal('lave',count)
      					
      					def procInstId = execution.getVariable('proInstId')
      					def processNumber = execution.getVariable('processNumber1')
      					
      					def hmac_sha256(String secretKey, String data) {
						    try {
						        Mac mac = Mac.getInstance("HmacSHA256")
						        SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey.getBytes(), "HmacSHA256")
						        mac.init(secretKeySpec)
						        byte[] digest = mac.doFinal(data.getBytes())
						        return digest
						    } catch (InvalidKeyException e) {
						        throw new RuntimeException("Invalid key exception while converting to HMacSHA256")
						    }
						}
						def METABASE_SITE_URL = "https://www.zhizaozu.com/metabase"
						def METABASE_SECRET_KEY = "dad5c368f5c8d7926c3565ac1d71c53557a0bc5c1a1d8a639e95a4b6a67f60d7"
						def header = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9"
						def playloadString = '{"resource":{"question":4},"params":{"procInstId":\"'+ procInstId +'\","processNumber": \"'+processNumber+'\"}}'
						def playload = Base64.getUrlEncoder().encodeToString(playloadString.bytes)
						
						def secret =Base64.getUrlEncoder().encodeToString(hmac_sha256(METABASE_SECRET_KEY , header+'.'+playload))
						def url = METABASE_SITE_URL + "/embed/question/" + header+'.'+playload+'.'+secret + "#bordered=true&titled=true"
      					execution.setVariableLocal('BBOT_BI_GXWL',url)
      					
      					playloadString = '{"resource":{"question":3},"params":{"procInstId":\"'+ procInstId +'\","processNumber": \"'+processNumber+'\"}}'
						playload = Base64.getUrlEncoder().encodeToString(playloadString.bytes)
						secret =Base64.getUrlEncoder().encodeToString(hmac_sha256(METABASE_SECRET_KEY , header+'.'+playload))
						url = METABASE_SITE_URL + "/embed/question/" + header+'.'+playload+'.'+secret + "#bordered=true&titled=true"
						execution.setVariableLocal('BBOT_BI_GJ',url)
						
						playloadString = '{"resource":{"question":5},"params":{"procInstId":\"'+ procInstId +'\","processNumber": \"'+processNumber+'\"}}'
						playload = Base64.getUrlEncoder().encodeToString(playloadString.bytes)
						secret =Base64.getUrlEncoder().encodeToString(hmac_sha256(METABASE_SECRET_KEY , header+'.'+playload))
						url = METABASE_SITE_URL + "/embed/question/" + header+'.'+playload+'.'+secret + "#bordered=true&titled=true"
						execution.setVariableLocal('BBOT_BI_JYZB',url)
      					
      					def processType = execution.getVariable('processType')
      					
      					switch(processType){
      						case '通用':
      							playloadString = '{"resource":{"question":6},"params":{"procInstId":\"'+ procInstId +'\","processNumber": \"'+processNumber+'\"}}'
      							playload = Base64.getUrlEncoder().encodeToString(playloadString.bytes)
      							secret =Base64.getUrlEncoder().encodeToString(hmac_sha256(METABASE_SECRET_KEY , header+'.'+playload))
      							url = METABASE_SITE_URL + "/embed/question/" + header+'.'+playload+'.'+secret + "#bordered=true&titled=true"
      							execution.setVariableLocal('BBOT_BI_TYGB',url)
      						break;
      						case '铣削':
      							playloadString = '{"resource":{"question":7},"params":{"procInstId":\"'+ procInstId +'\","processNumber": \"'+processNumber+'\"}}'
      							playload = Base64.getUrlEncoder().encodeToString(playloadString.bytes)
      							secret =Base64.getUrlEncoder().encodeToString(hmac_sha256(METABASE_SECRET_KEY , header+'.'+playload))
      							url = METABASE_SITE_URL + "/embed/question/" + header+'.'+playload+'.'+secret + "#bordered=true&titled=true"
      							execution.setVariableLocal('BBOT_BI_XXGB',url)
      						break;
      						case '车削':
      							playloadString = '{"resource":{"question":8},"params":{"procInstId":\"'+ procInstId +'\","processNumber": \"'+processNumber+'\"}}'
      							playload = Base64.getUrlEncoder().encodeToString(playloadString.bytes)
      							secret =Base64.getUrlEncoder().encodeToString(hmac_sha256(METABASE_SECRET_KEY , header+'.'+playload))
      							url = METABASE_SITE_URL + "/embed/question/" + header+'.'+playload+'.'+secret + "#bordered=true&titled=true"
      							execution.setVariableLocal('BBOT_BI_CXGB',url)
      						break;
      						default:
      							throw new org.activiti.engine.ActivitiIllegalArgumentException('工序类型报表未找到！')
      						break
      					}
      				]]>
      				</activiti:string>
      			</activiti:field>
      		</activiti:taskListener>
      	</extensionElements>
      </userTask>
      <sequenceFlow id="flow4" sourceRef="startevent2" targetRef="usertask2"></sequenceFlow>
      <exclusiveGateway id="exclusivegateway1" name="Exclusive Gateway"></exclusiveGateway>
      <sequenceFlow id="flow5" sourceRef="usertask2" targetRef="exclusivegateway1"></sequenceFlow>
      <sequenceFlow id="flow6" name="数量不为0" sourceRef="exclusivegateway1" targetRef="usertask2">
      	<conditionExpression xsi:type="tFormalExpression"><![CDATA[${execution.getVariable('count') > 0}]]></conditionExpression>
      </sequenceFlow>
      <endEvent id="endevent2" name="End"></endEvent>
      <sequenceFlow id="flow7" name="数量为0" sourceRef="exclusivegateway1" targetRef="endevent2">
      	<conditionExpression xsi:type="tFormalExpression"><![CDATA[${execution.getVariable('count') == 0}]]></conditionExpression>
      </sequenceFlow>
    </subProcess>
    <sequenceFlow id="flow1" sourceRef="startevent1" targetRef="usertask1"></sequenceFlow>
    <sequenceFlow id="flow2" sourceRef="usertask1" targetRef="subprocess1"></sequenceFlow>
    <endEvent id="endevent1" name="End"></endEvent>
    <sequenceFlow id="flow3" sourceRef="subprocess1" targetRef="endevent1"></sequenceFlow>
  </process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_productionExecution">
    <bpmndi:BPMNPlane bpmnElement="productionExecution" id="BPMNPlane_productionExecution">
      <bpmndi:BPMNShape bpmnElement="startevent1" id="BPMNShape_startevent1">
        <omgdc:Bounds height="35.0" width="35.0" x="40.0" y="183.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="usertask1" id="BPMNShape_usertask1">
        <omgdc:Bounds height="61.0" width="105.0" x="120.0" y="170.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="subprocess1" id="BPMNShape_subprocess1">
        <omgdc:Bounds height="205.0" width="381.0" x="280.0" y="99.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="startevent2" id="BPMNShape_startevent2">
        <omgdc:Bounds height="35.0" width="35.0" x="300.0" y="181.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="usertask2" id="BPMNShape_usertask2">
        <omgdc:Bounds height="61.0" width="105.0" x="370.0" y="168.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="exclusivegateway1" id="BPMNShape_exclusivegateway1">
        <omgdc:Bounds height="40.0" width="40.0" x="520.0" y="178.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="endevent2" id="BPMNShape_endevent2">
        <omgdc:Bounds height="35.0" width="35.0" x="605.0" y="181.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="endevent1" id="BPMNShape_endevent1">
        <omgdc:Bounds height="35.0" width="35.0" x="770.0" y="185.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge bpmnElement="flow4" id="BPMNEdge_flow4">
        <omgdi:waypoint x="335.0" y="198.0"></omgdi:waypoint>
        <omgdi:waypoint x="370.0" y="198.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow5" id="BPMNEdge_flow5">
        <omgdi:waypoint x="475.0" y="198.0"></omgdi:waypoint>
        <omgdi:waypoint x="520.0" y="198.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow6" id="BPMNEdge_flow6">
        <omgdi:waypoint x="540.0" y="218.0"></omgdi:waypoint>
        <omgdi:waypoint x="541.0" y="257.0"></omgdi:waypoint>
        <omgdi:waypoint x="421.0" y="257.0"></omgdi:waypoint>
        <omgdi:waypoint x="422.0" y="229.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="16.0" width="100.0" x="410.0" y="269.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow7" id="BPMNEdge_flow7">
        <omgdi:waypoint x="560.0" y="198.0"></omgdi:waypoint>
        <omgdi:waypoint x="605.0" y="198.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="16.0" width="100.0" x="550.0" y="198.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow1" id="BPMNEdge_flow1">
        <omgdi:waypoint x="75.0" y="200.0"></omgdi:waypoint>
        <omgdi:waypoint x="120.0" y="200.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow2" id="BPMNEdge_flow2">
        <omgdi:waypoint x="225.0" y="200.0"></omgdi:waypoint>
        <omgdi:waypoint x="280.0" y="201.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow3" id="BPMNEdge_flow3">
        <omgdi:waypoint x="661.0" y="201.0"></omgdi:waypoint>
        <omgdi:waypoint x="770.0" y="202.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</definitions>